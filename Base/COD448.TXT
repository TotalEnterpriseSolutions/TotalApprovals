OBJECT Codeunit 448 Job Queue Dispatcher
{
  OBJECT-PROPERTIES
  {
    Date=05/10/17;
    Time=11:48:48;
    Modified=Yes;
    Version List=NAVW110.00.00.16585,TA1.0;
  }
  PROPERTIES
  {
    TableNo=472;
    Permissions=TableData 472=rimd;
    OnRun=BEGIN
            IF NOT (Status IN [Status::Ready,Status::"In Process"]) THEN
              EXIT; // user changed status since it was scheduled.

            IF ("Expiration Date/Time" <> 0DT) AND ("Expiration Date/Time" < CURRENTDATETIME) THEN BEGIN
              DELETE;
              EXIT;
            END;

            IF Status <> Status::"In Process" THEN BEGIN
              LOCKTABLE;
              GET(ID);
              Status := Status::"In Process";
              "User Session Started" := CURRENTDATETIME;
              MODIFY;
              COMMIT;
            END;

            IF WaitForOthersWithSameCategory(Rec) THEN BEGIN
              Reschedule(Rec);
              EXIT;
            END;

            HandleRequest(Rec);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE HandleRequest@6(VAR JobQueueEntry@1000 : Record 472);
    VAR
      StartDateTime@1001 : DateTime;
      LastError@1004 : Text;
      WasSuccess@1002 : Boolean;
    BEGIN
      StartDateTime := CURRENTDATETIME;
      // Codeunit.Run is limited during write transactions because one or more tables will be locked.
      // To avoid NavCSideException we have either to add the COMMIT before the call or do not use a returned value.
      COMMIT;
      WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
      LastError := GETLASTERRORTEXT;
      JobQueueEntry.LOCKTABLE;
      // user may have deleted it in the meantime
      IF JobQueueEntry.GET(JobQueueEntry.ID) AND (JobQueueEntry.Status <> JobQueueEntry.Status::"On Hold") THEN BEGIN
        IF WasSuccess THEN
          JobQueueEntry.Status := JobQueueEntry.Status::Finished
        ELSE BEGIN
          JobQueueEntry.Status := JobQueueEntry.Status::Error;
          JobQueueEntry.SetErrorMessage(LastError);
        END;
        JobQueueEntry.MODIFY;
      END;

      // TA1.0 - START
      // To handle limited users who cannot write to more than 3 tables
      IF JobQueueEntry."Recurring Job" THEN InsertLogEntry(JobQueueEntry,StartDateTime);
      // TA1.0 - END
      COMMIT;
      IF WasSuccess THEN
        JobQueueEntry.CleanupAfterExecution
      ELSE
        JobQueueEntry.HandleExecutionError;
    END;

    PROCEDURE InsertLogEntry@7(VAR JobQueueEntry@1000 : Record 472;StartDateTime@1002 : DateTime);
    VAR
      JobQueueLogEntry@1001 : Record 474;
    BEGIN
      JobQueueLogEntry.INIT;
      JobQueueLogEntry.ID := JobQueueEntry.ID;
      JobQueueLogEntry."User ID" := JobQueueEntry."User ID";
      JobQueueLogEntry."Start Date/Time" := StartDateTime;
      JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
      JobQueueLogEntry."Object Type to Run" := JobQueueEntry."Object Type to Run";
      JobQueueLogEntry."Object ID to Run" := JobQueueEntry."Object ID to Run";
      JobQueueLogEntry.Description := JobQueueEntry.Description;
      IF JobQueueEntry.Status = JobQueueEntry.Status::Error THEN BEGIN
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Error;
        JobQueueLogEntry.SetErrorMessage(JobQueueEntry.GetErrorMessage);
      END ELSE
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Success;
      JobQueueLogEntry."Processed by User ID" := USERID;
      JobQueueLogEntry."Job Queue Category Code" := JobQueueEntry."Job Queue Category Code";
      JobQueueLogEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE WaitForOthersWithSameCategory@9(VAR JobQueueEntry@1000 : Record 472) : Boolean;
    VAR
      JobQueueEntry2@1001 : Record 472;
    BEGIN
      IF JobQueueEntry."Job Queue Category Code" = '' THEN
        EXIT(FALSE);

      JobQueueEntry2.SETFILTER(ID,'<>%1',JobQueueEntry.ID);
      JobQueueEntry2.SETRANGE("Job Queue Category Code",JobQueueEntry."Job Queue Category Code");
      JobQueueEntry2.SETRANGE(Status,JobQueueEntry2.Status::"In Process");
      EXIT(NOT JobQueueEntry2.ISEMPTY);
    END;

    LOCAL PROCEDURE Reschedule@15(VAR JobQueueEntry@1000 : Record 472);
    BEGIN
      IF JobQueueEntry.Status = JobQueueEntry.Status::"In Process" THEN BEGIN
        JobQueueEntry.Status := JobQueueEntry.Status::Ready;
        JobQueueEntry."User Session Started" := 0DT;
        RANDOMIZE;
        JobQueueEntry."System Task ID" :=
          TASKSCHEDULER.CREATETASK(
            CODEUNIT::"Job Queue Dispatcher",
            CODEUNIT::"Job Queue Error Handler",
            TRUE,COMPANYNAME,CURRENTDATETIME + 1000 + RANDOM(3000),JobQueueEntry.RECORDID);
        JobQueueEntry.MODIFY;
      END;
    END;

    PROCEDURE CalcNextRunTimeForRecurringJob@1(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1002 : DateTime;
    BEGIN
      IF JobQueueEntry."No. of Minutes between Runs" = 0 THEN BEGIN
        IF JobQueueEntry."Earliest Start Date/Time" <> 0DT THEN
          StartingDateTime := JobQueueEntry."Earliest Start Date/Time";
        NewRunDateTime := CREATEDATETIME(DT2DATE(StartingDateTime) + 1,0T);
      END ELSE
        NewRunDateTime := StartingDateTime + 60000 * JobQueueEntry."No. of Minutes between Runs";

      EXIT(CalcRunTimeForRecurringJob(JobQueueEntry,NewRunDateTime));
    END;

    PROCEDURE CalcInitialRunTime@4(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      EarliestPossibleRunTime@1001 : DateTime;
    BEGIN
      IF (JobQueueEntry."Earliest Start Date/Time" <> 0DT) AND (JobQueueEntry."Earliest Start Date/Time" > StartingDateTime) THEN
        EarliestPossibleRunTime := JobQueueEntry."Earliest Start Date/Time"
      ELSE
        EarliestPossibleRunTime := StartingDateTime;

      IF JobQueueEntry."Recurring Job" THEN
        EXIT(CalcRunTimeForRecurringJob(JobQueueEntry,EarliestPossibleRunTime));

      EXIT(EarliestPossibleRunTime);
    END;

    LOCAL PROCEDURE CalcRunTimeForRecurringJob@11(VAR JobQueueEntry@1000 : Record 472;StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1001 : DateTime;
      RunOnDate@1003 : ARRAY [7] OF Boolean;
      StartingWeekDay@1005 : Integer;
      NoOfExtraDays@1004 : Integer;
      NoOfDays@1007 : Integer;
      Found@1006 : Boolean;
    BEGIN
      JobQueueEntry.TESTFIELD("Recurring Job");
      RunOnDate[7] := JobQueueEntry."Run on Sundays";
      RunOnDate[1] := JobQueueEntry."Run on Mondays";
      RunOnDate[2] := JobQueueEntry."Run on Tuesdays";
      RunOnDate[3] := JobQueueEntry."Run on Wednesdays";
      RunOnDate[4] := JobQueueEntry."Run on Thursdays";
      RunOnDate[5] := JobQueueEntry."Run on Fridays";
      RunOnDate[6] := JobQueueEntry."Run on Saturdays";

      NewRunDateTime := StartingDateTime;
      NoOfDays := 0;
      IF (JobQueueEntry."Ending Time" <> 0T) AND (NewRunDateTime > JobQueueEntry.GetEndingDateTime(NewRunDateTime)) THEN BEGIN
        NewRunDateTime := JobQueueEntry.GetStartingDateTime(NewRunDateTime);
        NoOfDays := NoOfDays + 1;
      END;

      StartingWeekDay := DATE2DWY(DT2DATE(StartingDateTime),1);
      Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) MOD 7 + 1];
      WHILE NOT Found AND (NoOfExtraDays < 7) DO BEGIN
        NoOfExtraDays := NoOfExtraDays + 1;
        NoOfDays := NoOfDays + 1;
        Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) MOD 7 + 1];
      END;

      IF (JobQueueEntry."Starting Time" <> 0T) AND (NewRunDateTime < JobQueueEntry.GetStartingDateTime(NewRunDateTime)) THEN
        NewRunDateTime := JobQueueEntry.GetStartingDateTime(NewRunDateTime);

      IF (NoOfDays > 0) AND (NewRunDateTime > JobQueueEntry.GetStartingDateTime(NewRunDateTime)) THEN
        NewRunDateTime := JobQueueEntry.GetStartingDateTime(NewRunDateTime);

      IF (JobQueueEntry."Starting Time" = 0T) AND (NoOfExtraDays > 0) AND (JobQueueEntry."No. of Minutes between Runs" <> 0) THEN
        NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime),0T);

      IF Found THEN
        NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime) + NoOfDays,DT2TIME(NewRunDateTime));

      EXIT(NewRunDateTime);
    END;

    BEGIN
    END.
  }
}

