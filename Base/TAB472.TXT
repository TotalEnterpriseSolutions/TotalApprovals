OBJECT Table 472 Job Queue Entry
{
  OBJECT-PROPERTIES
  {
    Date=05/10/17;
    Time=10:50:56;
    Modified=Yes;
    Version List=NAVW110.00,TA1.0;
  }
  PROPERTIES
  {
    Permissions=TableData 472=rimd;
    DataCaptionFields=Object Type to Run,Object ID to Run,Object Caption to Run;
    OnInsert=VAR
               TotalApprovalSetup@1000000000 : Record 81000;
             BEGIN
               IF ISNULLGUID(ID) THEN
                 ID := CREATEGUID;
               "Last Ready State" := CURRENTDATETIME;
               "User Language ID" := GLOBALLANGUAGE;

               // TA1.0 - START
               TotalApprovalSetup.GET;
               IF TotalApprovalSetup."Background Posting Account" = '' THEN "User ID" := USERID
                 ELSE "User ID" := TotalApprovalSetup."Background Posting Account";
               // TA1.0 - END
             END;

    OnModify=BEGIN
               SetDefaultValues;
             END;

    OnDelete=BEGIN
               IF Status = Status::"In Process" THEN
                 ERROR(CannotDeleteEntryErr,Status);
               CancelTask("System Task ID");
             END;

    CaptionML=[ENU=Job Queue Entry;
               ENG=Job Queue Entry];
    LookupPageID=Page672;
    DrillDownPageID=Page672;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 2   ;   ;User ID             ;Text65        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID];
                                                   Editable=No }
    { 3   ;   ;XML                 ;BLOB          ;CaptionML=[ENU=XML;
                                                              ENG=XML] }
    { 4   ;   ;Last Ready State    ;DateTime      ;CaptionML=[ENU=Last Ready State;
                                                              ENG=Last Ready State];
                                                   Editable=No }
    { 5   ;   ;Expiration Date/Time;DateTime      ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Expiration Date/Time",LookupDateTime("Expiration Date/Time","Earliest Start Date/Time",0DT));
                                                            END;

                                                   CaptionML=[ENU=Expiration Date/Time;
                                                              ENG=Expiration Date/Time] }
    { 6   ;   ;Earliest Start Date/Time;DateTime  ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                                IF "Earliest Start Date/Time" <> xRec."Earliest Start Date/Time" THEN
                                                                  Reschedule;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Earliest Start Date/Time",LookupDateTime("Earliest Start Date/Time",0DT,"Expiration Date/Time"));
                                                            END;

                                                   CaptionML=[ENU=Earliest Start Date/Time;
                                                              ENG=Earliest Start Date/Time] }
    { 7   ;   ;Object Type to Run  ;Option        ;InitValue=Report;
                                                   OnValidate=BEGIN
                                                                IF "Object Type to Run" <> xRec."Object Type to Run" THEN
                                                                  VALIDATE("Object ID to Run",0);
                                                              END;

                                                   CaptionML=[ENU=Object Type to Run;
                                                              ENG=Object Type to Run];
                                                   OptionCaptionML=[ENU=,,,Report,,Codeunit;
                                                                    ENG=,,,Report,,Codeunit];
                                                   OptionString=,,,Report,,Codeunit }
    { 8   ;   ;Object ID to Run    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FIELD(Object Type to Run));
                                                   OnValidate=VAR
                                                                Object@1000 : Record 2000000001;
                                                              BEGIN
                                                                IF "Object ID to Run" <> xRec."Object ID to Run" THEN BEGIN
                                                                  CLEAR(XML);
                                                                  CLEAR(Description);
                                                                  CLEAR("Parameter String");
                                                                  CLEAR("Report Request Page Options");
                                                                END;
                                                                IF "Object ID to Run" = 0 THEN
                                                                  EXIT;
                                                                IF Object.GET("Object Type to Run",'',"Object ID to Run") THEN
                                                                  Object.TESTFIELD(Compiled);

                                                                CALCFIELDS("Object Caption to Run");
                                                                IF Description = '' THEN
                                                                  Description := GetDefaultDescription;

                                                                IF "Object Type to Run" <> "Object Type to Run"::Report THEN
                                                                  EXIT;
                                                                IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None THEN // Processing-only
                                                                  "Report Output Type" := "Report Output Type"::"None (Processing only)"
                                                                ELSE BEGIN
                                                                  "Report Output Type" := "Report Output Type"::PDF;
                                                                  IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::Word THEN
                                                                    "Report Output Type" := "Report Output Type"::Word;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              NewObjectID@1000 : Integer;
                                                            BEGIN
                                                              IF LookupObjectID(NewObjectID) THEN
                                                                VALIDATE("Object ID to Run",NewObjectID);
                                                            END;

                                                   CaptionML=[ENU=Object ID to Run;
                                                              ENG=Object ID to Run] }
    { 9   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type to Run),
                                                                                                                Object ID=FIELD(Object ID to Run)));
                                                   CaptionML=[ENU=Object Caption to Run;
                                                              ENG=Object Caption to Run];
                                                   Editable=No }
    { 10  ;   ;Report Output Type  ;Option        ;OnValidate=VAR
                                                                ReportLayoutSelection@1000 : Record 9651;
                                                                InitServerPrinterTable@1001 : Codeunit 9655;
                                                                PermissionManager@1002 : Codeunit 9002;
                                                              BEGIN
                                                                TESTFIELD("Object Type to Run","Object Type to Run"::Report);

                                                                IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None THEN // Processing-only
                                                                  TESTFIELD("Report Output Type","Report Output Type"::"None (Processing only)")
                                                                ELSE BEGIN
                                                                  IF "Report Output Type" = "Report Output Type"::"None (Processing only)" THEN
                                                                    FIELDERROR("Report Output Type");
                                                                  IF ReportLayoutSelection.HasCustomLayout("Object ID to Run") = 2 THEN // Word layout
                                                                    IF NOT ("Report Output Type" IN ["Report Output Type"::Print,"Report Output Type"::Word]) THEN
                                                                      FIELDERROR("Report Output Type");
                                                                END;
                                                                IF "Report Output Type" = "Report Output Type"::Print THEN BEGIN
                                                                  IF PermissionManager.SoftwareAsAService THEN BEGIN
                                                                    "Report Output Type" := "Report Output Type"::PDF;
                                                                    MESSAGE(NoPrintOnSaaSMsg);
                                                                  END ELSE
                                                                    "Printer Name" := InitServerPrinterTable.FindClosestMatchToClientDefaultPrinter("Object ID to Run");
                                                                END ELSE
                                                                  "Printer Name" := '';
                                                              END;

                                                   CaptionML=[ENU=Report Output Type;
                                                              ENG=Report Output Type];
                                                   OptionCaptionML=[ENU=PDF,Word,Excel,Print,None (Processing only);
                                                                    ENG=PDF,Word,Excel,Print,None (Processing only)];
                                                   OptionString=PDF,Word,Excel,Print,None (Processing only) }
    { 11  ;   ;Maximum No. of Attempts to Run;Integer;
                                                   CaptionML=[ENU=Maximum No. of Attempts to Run;
                                                              ENG=Maximum No. of Attempts to Run] }
    { 12  ;   ;No. of Attempts to Run;Integer     ;CaptionML=[ENU=No. of Attempts to Run;
                                                              ENG=No. of Attempts to Run];
                                                   Editable=No }
    { 13  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Ready,In Process,Error,On Hold,Finished;
                                                                    ENG=Ready,In Process,Error,On Hold,Finished];
                                                   OptionString=Ready,In Process,Error,On Hold,Finished;
                                                   Editable=No }
    { 14  ;   ;Priority            ;Integer       ;InitValue=1000;
                                                   CaptionML=[ENU=Priority;
                                                              ENG=Priority] }
    { 15  ;   ;Record ID to Process;RecordID      ;CaptionML=[ENU=Record ID to Process;
                                                              ENG=Record ID to Process] }
    { 16  ;   ;Parameter String    ;Text250       ;CaptionML=[ENU=Parameter String;
                                                              ENG=Parameter String] }
    { 17  ;   ;Recurring Job       ;Boolean       ;CaptionML=[ENU=Recurring Job;
                                                              ENG=Recurring Job] }
    { 18  ;   ;No. of Minutes between Runs;Integer;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=No. of Minutes between Runs;
                                                              ENG=No. of Minutes between Runs] }
    { 19  ;   ;Run on Mondays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Mondays;
                                                              ENG=Run on Mondays] }
    { 20  ;   ;Run on Tuesdays     ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Tuesdays;
                                                              ENG=Run on Tuesdays] }
    { 21  ;   ;Run on Wednesdays   ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Wednesdays;
                                                              ENG=Run on Wednesdays] }
    { 22  ;   ;Run on Thursdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Thursdays;
                                                              ENG=Run on Thursdays] }
    { 23  ;   ;Run on Fridays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Fridays;
                                                              ENG=Run on Fridays] }
    { 24  ;   ;Run on Saturdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Saturdays;
                                                              ENG=Run on Saturdays] }
    { 25  ;   ;Run on Sundays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Sundays;
                                                              ENG=Run on Sundays] }
    { 26  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                                IF "Starting Time" = 0T THEN
                                                                  "Reference Starting Time" := 0DT
                                                                ELSE
                                                                  "Reference Starting Time" := CREATEDATETIME(010100D,"Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ENG=Starting Time] }
    { 27  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ENG=Ending Time] }
    { 28  ;   ;Reference Starting Time;DateTime   ;OnValidate=BEGIN
                                                                "Starting Time" := DT2TIME("Reference Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Reference Starting Time;
                                                              ENG=Reference Starting Time];
                                                   Editable=No }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 31  ;   ;Run in User Session ;Boolean       ;CaptionML=[ENU=Run in User Session;
                                                              ENG=Run in User Session];
                                                   Editable=No }
    { 32  ;   ;User Session ID     ;Integer       ;CaptionML=[ENU=User Session ID;
                                                              ENG=User Session ID] }
    { 33  ;   ;Job Queue Category Code;Code10     ;TableRelation="Job Queue Category";
                                                   CaptionML=[ENU=Job Queue Category Code;
                                                              ENG=Job Queue Category Code] }
    { 34  ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENG=Error Message] }
    { 35  ;   ;Error Message 2     ;Text250       ;CaptionML=[ENU=Error Message 2;
                                                              ENG=Error Message 2] }
    { 36  ;   ;Error Message 3     ;Text250       ;CaptionML=[ENU=Error Message 3;
                                                              ENG=Error Message 3] }
    { 37  ;   ;Error Message 4     ;Text250       ;CaptionML=[ENU=Error Message 4;
                                                              ENG=Error Message 4] }
    { 40  ;   ;User Service Instance ID;Integer   ;CaptionML=[ENU=User Service Instance ID;
                                                              ENG=User Service Instance ID] }
    { 41  ;   ;User Session Started;DateTime      ;CaptionML=[ENU=User Session Started;
                                                              ENG=User Session Started];
                                                   Editable=No }
    { 42  ;   ;Timeout (sec.)      ;Integer       ;CaptionML=[ENU=Timeout (sec.);
                                                              ENG=Timeout (sec.)];
                                                   MinValue=0 }
    { 43  ;   ;Notify On Success   ;Boolean       ;CaptionML=[ENU=Notify On Success;
                                                              ENG=Notify On Success] }
    { 44  ;   ;User Language ID    ;Integer       ;CaptionML=[ENU=User Language ID;
                                                              ENG=User Language ID] }
    { 45  ;   ;Printer Name        ;Text250       ;OnValidate=VAR
                                                                InitServerPrinterTable@1000 : Codeunit 9655;
                                                              BEGIN
                                                                TESTFIELD("Report Output Type","Report Output Type"::Print);
                                                                IF "Printer Name" = '' THEN
                                                                  EXIT;
                                                                InitServerPrinterTable.ValidatePrinterName("Printer Name");
                                                              END;

                                                   OnLookup=VAR
                                                              Printer@1001 : Record 2000000039;
                                                              ServerPrinters@1000 : Page 683;
                                                            BEGIN
                                                              ServerPrinters.SetSelectedPrinterName("Printer Name");
                                                              IF ServerPrinters.RUNMODAL = ACTION::OK THEN BEGIN
                                                                ServerPrinters.GETRECORD(Printer);
                                                                "Printer Name" := Printer.ID;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Printer Name;
                                                              ENG=Printer Name] }
    { 46  ;   ;Report Request Page Options;Boolean;OnValidate=BEGIN
                                                                IF "Report Request Page Options" THEN
                                                                  RunReportRequestPage
                                                                ELSE BEGIN
                                                                  CLEAR(XML);
                                                                  MESSAGE(RequestPagesOptionsDeletedMsg);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Report Request Page Options;
                                                              ENG=Report Request Page Options] }
    { 47  ;   ;Rerun Delay (sec.)  ;Integer       ;CaptionML=[ENU=Rerun Delay (sec.);
                                                              ENG=Rerun Delay (sec.)];
                                                   MinValue=0;
                                                   MaxValue=3600 }
    { 48  ;   ;System Task ID      ;GUID          ;CaptionML=[ENU=System Task ID;
                                                              ENG=System Task ID] }
    { 49  ;   ;Scheduled           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Scheduled Task" WHERE (ID=FIELD(System Task ID)));
                                                   CaptionML=[ENU=Scheduled;
                                                              ENG=Scheduled] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Job Queue Category Code                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoErrMsg@1000 : TextConst 'ENU=There is no error message.;ENG=There is no error message.';
      CannotDeleteEntryErr@1001 : TextConst '@@@=%1 is a status value, such as Success or Error.;ENU=You cannot delete an entry that has status %1.;ENG=You cannot delete an entry that has status %1.';
      ScheduledForPostingMsg@1002 : TextConst '@@@="%1=a date, %2 = a user.";ENU=Scheduled for posting on %1 by %2.;ENG=Scheduled for posting on %1 by %2.';
      NoRecordErr@1003 : TextConst 'ENU=No record is associated with the job queue entry.;ENG=No record is associated with the job queue entry.';
      RequestPagesOptionsDeletedMsg@1004 : TextConst 'ENU=You have cleared the report parameters. Select the check box in the field to show the report request page again.;ENG=You have cleared the report parameters. Select the check box in the field to show the report request page again.';
      ExpiresBeforeStartErr@1005 : TextConst '@@@="%1 = Expiration Date, %2=Start date";ENU=%1 must be later than %2.;ENG=%1 must be later than %2.';
      UserSessionJobsCannotBeRecurringErr@1006 : TextConst 'ENU=You cannot set up recurring user session job queue entries.;ENG=You cannot set up recurring user session job queue entries.';
      NoPrintOnSaaSMsg@1007 : TextConst 'ENU=You cannot select a printer from this online product. Instead, save as PDF, or another format, which you can print later.\\The output type has been set to PDF.;ENG=You cannot select a printer from this online product. Instead, save as PDF, or another format, which you can print later.\\The output type has been set to PDF.';

    PROCEDURE GetErrorMessage@1() : Text;
    BEGIN
      EXIT("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text;
    BEGIN
      e := GetErrorMessage;
      IF e = '' THEN
        e := NoErrMsg;
      MESSAGE('%1',e);
    END;

    PROCEDURE SetError@7(ErrorText@1000 : Text);
    BEGIN
      LOCKTABLE;
      GET(ID);
      SetErrorMessage(ErrorText);
      ClearServiceValues;
      SetStatusValue(Status::Error);
      MODIFY;
    END;

    PROCEDURE SetStatus@3(NewStatus@1000 : Option);
    BEGIN
      IF NewStatus = Status THEN
        EXIT;
      LOCKTABLE;
      GET(ID);
      ClearServiceValues;
      SetStatusValue(NewStatus);
    END;

    PROCEDURE Cancel@4();
    BEGIN
      LOCKTABLE;
      IF GET(ID) THEN BEGIN
        CancelTask("System Task ID");
        DELETE(TRUE);
      END;
    END;

    PROCEDURE Restart@5();
    BEGIN
      SetStatus(Status::"On Hold");
      SetStatus(Status::Ready);
    END;

    LOCAL PROCEDURE CancelTask@32(TaskID@1000 : GUID);
    BEGIN
      IF NOT ISNULLGUID(TaskID) THEN
        IF TASKSCHEDULER.TASKEXISTS(TaskID) THEN
          TASKSCHEDULER.CANCELTASK(TaskID);
    END;

    LOCAL PROCEDURE Reschedule@31();
    BEGIN
      CancelTask("System Task ID");
      "User ID" := USERID;
      IF Status = Status::Ready THEN
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
    END;

    PROCEDURE ReuseExistingJobFromID@34(JobID@1000 : GUID;ExecutionDateTime@1002 : DateTime) : Boolean;
    BEGIN
      IF GET(JobID) THEN BEGIN
        IF NOT (Status IN [Status::Ready,Status::"In Process"]) THEN BEGIN
          "Earliest Start Date/Time" := ExecutionDateTime;
          SetStatus(Status::Ready);
        END;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ReuseExistingJobFromCatagory@35(JobQueueCatagoryCode@1001 : Code[10];ExecutionDateTime@1002 : DateTime) : Boolean;
    BEGIN
      SETRANGE("Job Queue Category Code",JobQueueCatagoryCode);
      IF FINDFIRST THEN
        EXIT(ReuseExistingJobFromID(ID,ExecutionDateTime));

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetDefaultValues@6();
    BEGIN
      IF ("User ID" = '') OR ("Object Type to Run" <> xRec."Object Type to Run") OR ("Object ID to Run" <> xRec."Object ID to Run") OR
         ("Parameter String" <> xRec."Parameter String")
      THEN
        Reschedule;

      IF "Last Ready State" = 0DT THEN
        "Last Ready State" := CURRENTDATETIME;
      "User Language ID" := GLOBALLANGUAGE;
    END;

    LOCAL PROCEDURE ClearServiceValues@9();
    BEGIN
      "User Session Started" := 0DT;
      "User Service Instance ID" := 0;
      "User Session ID" := 0;
    END;

    PROCEDURE CleanupAfterExecution@11();
    VAR
      JobQueueDispatcher@1000 : Codeunit 448;
    BEGIN
      IF "Notify On Success" THEN
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Send Notification",Rec);

      IF "Recurring Job" THEN BEGIN
        ClearServiceValues;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcNextRunTimeForRecurringJob(Rec,CURRENTDATETIME);
        IF Status <> Status::"On Hold" THEN BEGIN
          Status := Status::Ready;
          CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
        END;
        MODIFY;
      END ELSE
        DELETE;
    END;

    PROCEDURE HandleExecutionError@12();
    VAR
      JobQueueSendNotification@1000 : Codeunit 454;
    BEGIN
      "No. of Attempts to Run" += 1;
      IF "Maximum No. of Attempts to Run" > "No. of Attempts to Run" THEN BEGIN
        "Earliest Start Date/Time" := CURRENTDATETIME + 1000 * "Rerun Delay (sec.)";
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
      END ELSE BEGIN
        SetStatusValue(Status::Error);
        MODIFY;
        COMMIT;
        IF JobQueueSendNotification.RUN(Rec) THEN;
      END;
    END;

    PROCEDURE GetTimeout@10() : Integer;
    BEGIN
      IF "Timeout (sec.)" > 0 THEN
        EXIT("Timeout (sec.)");
      EXIT(1000000000);
    END;

    LOCAL PROCEDURE SetRecurringField@13();
    BEGIN
      "Recurring Job" :=
        "Run on Mondays" OR
        "Run on Tuesdays" OR "Run on Wednesdays" OR "Run on Thursdays" OR "Run on Fridays" OR "Run on Saturdays" OR "Run on Sundays";

      IF "Recurring Job" AND "Run in User Session" THEN
        ERROR(UserSessionJobsCannotBeRecurringErr);
    END;

    LOCAL PROCEDURE SetStatusValue@14(NewStatus@1000 : Option);
    VAR
      JobQueueDispatcher@1001 : Codeunit 448;
    BEGIN
      IF (Status <> Status::Ready) AND (NewStatus = Status::Ready) THEN BEGIN
        "Last Ready State" := CURRENTDATETIME;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
        "User ID" := USERID;
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
      END;
      IF (Status IN [Status::Ready,Status::"In Process"]) AND (NewStatus = Status::"On Hold") THEN BEGIN
        CancelTask("System Task ID");
        CLEAR("System Task ID");
      END;
      Status := NewStatus;
      MODIFY;
    END;

    PROCEDURE ShowStatusMsg@15(JQID@1000 : GUID);
    VAR
      JobQueueEntry@1001 : Record 472;
    BEGIN
      IF JobQueueEntry.GET(JQID) THEN
        CASE JobQueueEntry.Status OF
          JobQueueEntry.Status::Error:
            MESSAGE(JobQueueEntry.GetErrorMessage);
          JobQueueEntry.Status::"In Process":
            MESSAGE(FORMAT(JobQueueEntry.Status::"In Process"));
          ELSE
            MESSAGE(ScheduledForPostingMsg,JobQueueEntry."User Session Started",JobQueueEntry."User ID");
        END;
    END;

    PROCEDURE LookupRecordToProcess@16();
    VAR
      RecRef@1002 : RecordRef;
      RecVariant@1001 : Variant;
    BEGIN
      IF ISNULLGUID(ID) THEN
        EXIT;
      IF FORMAT("Record ID to Process") = '' THEN
        ERROR(NoRecordErr);
      RecRef.GET("Record ID to Process");
      RecRef.SETRECFILTER;
      RecVariant := RecRef;
      PAGE.RUN(0,RecVariant);
    END;

    PROCEDURE LookupObjectID@19(VAR NewObjectID@1000 : Integer) : Boolean;
    VAR
      AllObjWithCaption@1002 : Record 2000000058;
      Objects@1001 : Page 358;
    BEGIN
      IF AllObjWithCaption.GET("Object Type to Run","Object ID to Run") THEN;
      AllObjWithCaption.FILTERGROUP(2);
      AllObjWithCaption.SETRANGE("Object Type","Object Type to Run");
      AllObjWithCaption.FILTERGROUP(0);
      Objects.SETRECORD(AllObjWithCaption);
      Objects.SETTABLEVIEW(AllObjWithCaption);
      Objects.LOOKUPMODE := TRUE;
      IF Objects.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Objects.GETRECORD(AllObjWithCaption);
        NewObjectID := AllObjWithCaption."Object ID";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LookupDateTime@26(InitDateTime@1000 : DateTime;EarliestDateTime@1001 : DateTime;LatestDateTime@1003 : DateTime) : DateTime;
    VAR
      DateTimeDialog@1004 : Page 684;
      NewDateTime@1002 : DateTime;
    BEGIN
      NewDateTime := InitDateTime;
      IF InitDateTime < EarliestDateTime THEN
        InitDateTime := EarliestDateTime;
      IF (LatestDateTime <> 0DT) AND (InitDateTime > LatestDateTime) THEN
        InitDateTime := LatestDateTime;

      DateTimeDialog.SetDateTime(ROUNDDATETIME(InitDateTime,1000));

      IF DateTimeDialog.RUNMODAL = ACTION::OK THEN
        NewDateTime := DateTimeDialog.GetDateTime;
      EXIT(NewDateTime);
    END;

    LOCAL PROCEDURE CheckStartAndExpirationDateTime@24();
    BEGIN
      IF ("Expiration Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" >= "Expiration Date/Time")
      THEN
        ERROR(ExpiresBeforeStartErr,FIELDCAPTION("Expiration Date/Time"),FIELDCAPTION("Earliest Start Date/Time"));
    END;

    PROCEDURE GetReportParameters@17() : Text;
    VAR
      InStr@1000 : InStream;
      Params@1001 : Text;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");

      CALCFIELDS(XML);
      IF XML.HASVALUE THEN BEGIN
        XML.CREATEINSTREAM(InStr,TEXTENCODING::UTF8);
        InStr.READ(Params);
      END;

      EXIT(Params);
    END;

    PROCEDURE SetReportParameters@20(Params@1002 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");
      CLEAR(XML);
      IF Params <> '' THEN BEGIN
        "Report Request Page Options" := TRUE;
        XML.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
        OutStr.WRITE(Params);
      END;
      MODIFY; // Necessary because the following function does a CALCFIELDS(XML)
      Description := GetDefaultDescriptionFromReportRequestPage(Description);
      MODIFY;
    END;

    PROCEDURE RunReportRequestPage@18();
    VAR
      Params@1000 : Text;
    BEGIN
      IF "Object Type to Run" <> "Object Type to Run"::Report THEN
        EXIT;
      IF "Object ID to Run" = 0 THEN
        EXIT;

      Params := REPORT.RUNREQUESTPAGE("Object ID to Run",GetReportParameters);

      IF Params <> '' THEN
        SetReportParameters(Params);
    END;

    PROCEDURE ScheduleJobQueueEntry@21(CodeunitID@1000 : Integer;RecordIDToProcess@1001 : RecordID);
    BEGIN
      INIT;
      ID := CREATEGUID;
      "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
      "Object Type to Run" := "Object Type to Run"::Codeunit;
      "Object ID to Run" := CodeunitID;
      "Record ID to Process" := RecordIDToProcess;
      "Run in User Session" := FALSE;
      Priority := 1000;
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
    END;

    PROCEDURE ScheduleJobQueueEntryForLater@33(CodeunitID@1000 : Integer;StartDateTime@1001 : DateTime;JobQueueCategoryCode@1002 : Code[10];JobParameter@1003 : Text);
    BEGIN
      INIT;
      ID := CREATEGUID;
      "Earliest Start Date/Time" := StartDateTime;
      "Object Type to Run" := "Object Type to Run"::Codeunit;
      "Object ID to Run" := CodeunitID;
      "Run in User Session" := FALSE;
      Priority := 1000;
      "Job Queue Category Code" := JobQueueCategoryCode;
      "Maximum No. of Attempts to Run" := 3;
      "Rerun Delay (sec.)" := 60;
      "Parameter String" := COPYSTR(JobParameter,1,MAXSTRLEN("Parameter String"));
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
    END;

    PROCEDURE GetStartingDateTime@27(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      EXIT(CREATEDATETIME(DT2DATE(Date),DT2TIME("Reference Starting Time")));
    END;

    PROCEDURE GetEndingDateTime@30(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      IF "Ending Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),0T));
      IF "Starting Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      IF "Starting Time" < "Ending Time" THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      EXIT(CREATEDATETIME(DT2DATE(Date) + 1,"Ending Time"));
    END;

    PROCEDURE ScheduleRecurrentJobQueueEntry@25(ObjType@1001 : Option;ObjID@1002 : Integer;RecId@1000 : RecordID);
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      IF FORMAT(RecId) <> '' THEN
        SETFILTER("Record ID to Process",FORMAT(RecId));
      LOCKTABLE;

      IF NOT FINDFIRST THEN BEGIN
        CLEAR(Rec);
        "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
        "Object Type to Run" := ObjType;
        "Object ID to Run" := ObjID;
        "Record ID to Process" := RecId;
        "Recurring Job" := TRUE;
        "Run on Mondays" := TRUE;
        "Run on Tuesdays" := TRUE;
        "Run on Wednesdays" := TRUE;
        "Run on Thursdays" := TRUE;
        "Run on Fridays" := TRUE;
        "Run on Saturdays" := TRUE;
        "Run on Sundays" := TRUE;
        "Starting Time" := 080000T;
        "Maximum No. of Attempts to Run" := 3;
        "No. of Minutes between Runs" := 5;
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",Rec);
      END;
    END;

    PROCEDURE FindJobQueueEntry@23(ObjType@1002 : Option;ObjID@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      EXIT(FINDFIRST);
    END;

    PROCEDURE GetDefaultDescription@28() : Text[50];
    VAR
      DefaultDescription@1004 : Text[50];
    BEGIN
      CALCFIELDS("Object Caption to Run");
      DefaultDescription := COPYSTR("Object Caption to Run",1,50);
      IF "Object Type to Run" <> "Object Type to Run"::Report THEN
        EXIT(DefaultDescription);
      EXIT(GetDefaultDescriptionFromReportRequestPage(DefaultDescription));
    END;

    LOCAL PROCEDURE GetDefaultDescriptionFromReportRequestPage@29(DefaultDescription@1004 : Text[50]) : Text[50];
    VAR
      AccScheduleName@1005 : Record 84;
      XMLDOMManagement@1003 : Codeunit 6224;
      InStr@1002 : InStream;
      XMLRootNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT ("Object ID to Run" IN [REPORT::"Account Schedule"]) THEN
        EXIT(DefaultDescription);

      CALCFIELDS(XML); // Requestpage data
      IF NOT XML.HASVALUE THEN
        EXIT(DefaultDescription);
      XML.CREATEINSTREAM(InStr);
      IF NOT XMLDOMManagement.LoadXMLNodeFromInStream(InStr,XMLRootNode) THEN
        EXIT(DefaultDescription);
      IF ISNULL(XMLRootNode) THEN
        EXIT(DefaultDescription);

      // Specific for report 25 Account Schedule
      XMLNode := XMLRootNode.SelectSingleNode('//Field[@name="AccSchedName"]');
      IF ISNULL(XMLNode) THEN
        EXIT(DefaultDescription);
      IF NOT AccScheduleName.GET(COPYSTR(XMLNode.InnerText,1,MAXSTRLEN(AccScheduleName.Name))) THEN
        EXIT(DefaultDescription);
      EXIT(AccScheduleName.Description);
    END;

    PROCEDURE IsToReportInbox@22() : Boolean;
    BEGIN
      EXIT(
        ("Object Type to Run" = "Object Type to Run"::Report) AND
        ("Report Output Type" IN ["Report Output Type"::PDF,"Report Output Type"::Word,
                                  "Report Output Type"::Excel]));
    END;

    BEGIN
    END.
  }
}

