OBJECT Table 454 Approval Entry
{
  OBJECT-PROPERTIES
  {
    Date=01/09/17;
    Time=16:33:54;
    Modified=Yes;
    Version List=NAVW110.00,TA1.0;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
               "Last Modified By User ID" := USERID;
             END;

    CaptionML=[ENU=Approval Entry;
               ENG=Approval Entry];
  }
  FIELDS
  {
    { 1   ;   ;Table ID            ;Integer       ;CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU="Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ";
                                                                    ENG="Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, "];
                                                   OptionString=[Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ] }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 4   ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              ENG=Sequence No.] }
    { 5   ;   ;Approval Code       ;Code20        ;CaptionML=[ENU=Approval Code;
                                                              ENG=Approval Code] }
    { 6   ;   ;Sender ID           ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Sender ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sender ID;
                                                              ENG=Sender ID];
                                                   Description=//Person Responsible }
    { 7   ;   ;Salespers./Purch. Code;Code10      ;CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENG=Salespers./Purch. Code] }
    { 8   ;   ;Approver ID         ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Approver ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Approver ID;
                                                              ENG=Approver ID];
                                                   Description=//Approver }
    { 9   ;   ;Status              ;Option        ;OnValidate=VAR
                                                                TotalCommunicationFunctions@1000000000 : Codeunit 91000;
                                                              BEGIN
                                                                IF (xRec.Status = Status::Created) AND (Status = Status::Open) THEN
                                                                  "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);

                                                                //TA1.0
                                                                IF Status = Status::Canceled THEN "Approval Status" := xRec.Status ELSE "Approval Status" := Status;

                                                                CASE Status OF
                                                                  Status::Open:
                                                                    TotalCommunicationFunctions.RecordHandlerApprovals("Entry No.",0,2,FALSE);
                                                                  Status::Approved:
                                                                    BEGIN
                                                                      //Clear Existing Approvals Emails
                                                                      TotalCommunicationFunctions.ClearApproval("Batch No.","Entry No.",Status);
                                                                     END;
                                                                  Status::"Proxy Approved":
                                                                    BEGIN
                                                                      //Clear Existing Approvals Emails
                                                                      TotalCommunicationFunctions.ClearApproval("Batch No.","Entry No.",Status);
                                                                    END;
                                                                  Status::Rejected:
                                                                    BEGIN
                                                                      //Clear Existing Approvals Emails
                                                                      TotalCommunicationFunctions.ClearApproval("Batch No.","Entry No.",Status);
                                                                    END;
                                                                  Status::Canceled:
                                                                    BEGIN
                                                                      //Clear Existing Approvals Emails
                                                                      TotalCommunicationFunctions.ClearApproval("Batch No.","Entry No.",Status);
                                                                    END;
                                                                  Status::Delegated:
                                                                    BEGIN
                                                                      //Clear Existing Approvals Emails
                                                                      TotalCommunicationFunctions.ClearApproval("Batch No.","Entry No.",Status);
                                                                    END;
                                                                END;
                                                                //TA1.0
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Created,Open,Canceled,Rejected,Approved,Proxy Approved,Proxy Rejected,Delegated;
                                                                    ENG=Created,Open,Canceled,Rejected,Approved,Proxy Approved,Proxy Rejected,Delegated];
                                                   OptionString=Created,Open,Canceled,Rejected,Approved,Proxy Approved,Proxy Rejected,Delegated }
    { 10  ;   ;Date-Time Sent for Approval;DateTime;
                                                   CaptionML=[ENU=Date-Time Sent for Approval;
                                                              ENG=Date-Time Sent for Approval] }
    { 11  ;   ;Last Date-Time Modified;DateTime   ;CaptionML=[ENU=Last Date-Time Modified;
                                                              ENG=Last Date-Time Modified] }
    { 12  ;   ;Last Modified By User ID;Code50    ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Last Modified By User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modified By User ID;
                                                              ENG=Last Modified By User ID] }
    { 13  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Approval Comment Line" WHERE (Table ID=FIELD(Table ID),
                                                                                                    Record ID to Approve=FIELD(Record ID to Approve),
                                                                                                    Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 14  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 15  ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;CaptionML=[ENU=Amount (LCY);
                                                              ENG=Amount (LCY)];
                                                   AutoFormatType=1 }
    { 17  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 18  ;   ;Approval Type       ;Option        ;CaptionML=[ENU=Approval Type;
                                                              ENG=Approval Type];
                                                   OptionCaptionML=[ENU=Workflow User Group,Sales Pers./Purchaser,Approver;
                                                                    ENG=Workflow User Group,Sales Pers./Purchaser,Approver];
                                                   OptionString=Workflow User Group,Sales Pers./Purchaser,Approver }
    { 19  ;   ;Limit Type          ;Option        ;CaptionML=[ENU=Limit Type;
                                                              ENG=Limit Type];
                                                   OptionCaptionML=[ENU=Approval Limits,Credit Limits,Request Limits,No Limits;
                                                                    ENG=Approval Limits,Credit Limits,Request Limits,No Limits];
                                                   OptionString=Approval Limits,Credit Limits,Request Limits,No Limits }
    { 20  ;   ;Available Credit Limit (LCY);Decimal;
                                                   CaptionML=[ENU=Available Credit Limit (LCY);
                                                              ENG=Available Credit Limit (LCY)] }
    { 21  ;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Created|Open),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Pending Approvals;
                                                              ENG=Pending Approvals] }
    { 22  ;   ;Record ID to Approve;RecordID      ;CaptionML=[ENU=Record ID to Approve;
                                                              ENG=Record ID to Approve] }
    { 23  ;   ;Delegation Date Formula;DateFormula;CaptionML=[ENU=Delegation Date Formula;
                                                              ENG=Delegation Date Formula] }
    { 26  ;   ;Number of Approved Requests;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Approved),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Number of Approved Requests;
                                                              ENG=Number of Approved Requests] }
    { 27  ;   ;Number of Rejected Requests;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Record ID to Approve=FIELD(Record ID to Approve),
                                                                                             Status=FILTER(Rejected),
                                                                                             Workflow Step Instance ID=FIELD(Workflow Step Instance ID)));
                                                   CaptionML=[ENU=Number of Rejected Requests;
                                                              ENG=Number of Rejected Requests] }
    { 29  ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 30  ;   ;Workflow Step Instance ID;GUID     ;CaptionML=[ENU=Workflow Step Instance ID;
                                                              ENG=Workflow Step Instance ID] }
    { 31  ;   ;Related to Change   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Workflow - Record Change" WHERE (Workflow Step Instance ID=FIELD(Workflow Step Instance ID),
                                                                                                       Record ID=FIELD(Record ID to Approve)));
                                                   CaptionML=[ENU=Related to Change;
                                                              ENG=Related to Change] }
    { 81000;  ;Unapproved No.      ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Unapproved No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                No.=FIELD(Document No.)));
                                                   Description=TA1.0;
                                                   Editable=No }
    { 81001;  ;Approval Status     ;Option        ;OptionString=Created,Open,Canceled,Rejected,Approved,Proxy Approved,Proxy Rejected,Delegated;
                                                   Description=TA1.0 }
    { 81002;  ;Dimension 1         ;Code20        ;OnValidate=BEGIN
                                                                "Dimension 1 Description" := GetDimensionDescription("Dimension 1","Dimension Code 1");
                                                              END;

                                                   Description=TA1.0 }
    { 81003;  ;Dimension 2         ;Code20        ;OnValidate=BEGIN
                                                                "Dimension 2 Description" := GetDimensionDescription("Dimension 2","Dimension Code 2");
                                                              END;

                                                   Description=TA1.0 }
    { 81004;  ;Dimension Code 1    ;Code20        ;OnValidate=BEGIN
                                                                "Dimension 1 Description" := GetDimensionDescription("Dimension 1","Dimension Code 1");
                                                              END;

                                                   Description=TA1.0 }
    { 81005;  ;Dimension Code 2    ;Code20        ;OnValidate=BEGIN
                                                                "Dimension 2 Description" := GetDimensionDescription("Dimension 2","Dimension Code 2");
                                                              END;

                                                   Description=TA1.0 }
    { 81006;  ;Dimension 1 Description;Text60     ;Description=TA1.0 }
    { 81007;  ;Dimension 2 Description;Text60     ;Description=TA1.0 }
    { 81008;  ;Description         ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Posting Description" WHERE (Document Type=FIELD(Document Type),
                                                                                                                     No.=FIELD(Document No.)));
                                                   Description=TA1.0;
                                                   Editable=No }
    { 81009;  ;Sender              ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."Full Name" WHERE (User Name=FIELD(Sender ID)));
                                                   Description=TA1.0;
                                                   Editable=No }
    { 81010;  ;Approver            ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."Full Name" WHERE (User Name=FIELD(Approver ID)));
                                                   Description=TA1.0;
                                                   Editable=No }
    { 81011;  ;Batch No.           ;Code20        ;Description=TA1.0 }
    { 81012;  ;Procurement Type    ;Code20        ;Description=TA1.0 }
    { 81013;  ;Value Net           ;Decimal       ;Description=TA1.0 }
    { 81014;  ;Value Gross         ;Decimal       ;Description=TA1.0 }
    { 81015;  ;Proc Approval Type  ;Option        ;OptionString=Budget,Commercial;
                                                   Description=TA1.0 }
    { 81016;  ;Workflow Line       ;Integer       ;Description=TA1.0 }
    { 81017;  ;Proxy Action By     ;Code50        ;Description=TA1.0 }
    { 81018;  ;Proxy Action On     ;Date          ;Description=TA1.0 }
    { 81019;  ;Proxy Action ID     ;Integer       ;Description=TA1.0 }
    { 81020;  ;Approver Comment    ;Text250       ;Description=TA1.0 }
    { 81021;  ;Raised By ID        ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              UserMgt.LookupUserID("Approver ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Approver ID;
                                                              ENG=Approver ID];
                                                   Description=TA1.0 //Raised By }
    { 81022;  ;Raised By           ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."Full Name" WHERE (User Name=FIELD(Raised By ID)));
                                                   Description=TA1.0;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Record ID to Approve,Workflow Step Instance ID,Sequence No. }
    {    ;Table ID,Document Type,Document No.,Sequence No.,Record ID to Approve }
    {    ;Approver ID,Status                       }
    {    ;Sender ID                                }
    {    ;Due Date                                 }
    {    ;Table ID,Record ID to Approve,Status,Workflow Step Instance ID,Sequence No. }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Document Type,Unapproved No.             }
  }
  CODE
  {
    VAR
      UserMgt@1000 : Codeunit 418;
      PageManagement@1001 : Codeunit 700;
      RecNotExistTxt@1002 : TextConst 'ENU=The record does not exist.;ENG=The record does not exist.';
      ChangeRecordDetailsTxt@1003 : TextConst '@@@="Prefix = Record information %1 = field caption %2 = old value %3 = new value. Example: Customer 123455; Credit Limit changed from 100.00 to 200.00";ENU="; %1 changed from %2 to %3";ENG="; %1 changed from %2 to %3"';

    PROCEDURE ShowRecord@1();
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;
      RecRef.SETRECFILTER;
      PageManagement.PageRun(RecRef);
    END;

    PROCEDURE RecordCaption@4() : Text;
    VAR
      Object@1000 : Record 2000000001;
      RecRef@1002 : RecordRef;
      PageNo@1001 : Integer;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;
      PageNo := PageManagement.GetPageID(RecRef);
      IF PageNo = 0 THEN
        EXIT;
      Object.GET(Object.Type::Page,'',PageNo);
      Object.CALCFIELDS(Caption);
      EXIT(STRSUBSTNO('%1 %2',Object.Caption,"Document No."));
    END;

    PROCEDURE RecordDetails@3() : Text;
    VAR
      SalesHeader@1001 : Record 36;
      PurchHeader@1000 : Record 38;
      RecRef@1002 : RecordRef;
      ChangeRecordDetails@1003 : Text;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT(RecNotExistTxt);

      ChangeRecordDetails := GetChangeRecordDetails;

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.CALCFIELDS(Amount);
            EXIT(STRSUBSTNO('%1 ; %2: %3',SalesHeader."Sell-to Customer Name",
                SalesHeader.FIELDCAPTION(Amount),SalesHeader.Amount));
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchHeader);
            PurchHeader.CALCFIELDS(Amount);
            EXIT(STRSUBSTNO('%1 ; %2: %3',PurchHeader."Buy-from Vendor Name",
                PurchHeader.FIELDCAPTION(Amount),PurchHeader.Amount));
          END;
        ELSE
          EXIT(FORMAT("Record ID to Approve",0,1) + ChangeRecordDetails);
      END;
    END;

    PROCEDURE IsOverdue@5() : Boolean;
    BEGIN
      EXIT((Status IN [Status::Created,Status::Open]) AND ("Due Date" < TODAY));
    END;

    PROCEDURE GetCustVendorDetails@6(VAR CustVendorNo@1002 : Code[20];VAR CustVendorName@1003 : Text[50]);
    VAR
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1001 : Record 36;
      Customer@1005 : Record 18;
      RecRef@1004 : RecordRef;
    BEGIN
      IF NOT RecRef.GET("Record ID to Approve") THEN
        EXIT;

      CASE "Table ID" OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CustVendorNo := PurchaseHeader."Pay-to Vendor No.";
            CustVendorName := PurchaseHeader."Pay-to Name";
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CustVendorNo := SalesHeader."Bill-to Customer No.";
            CustVendorName := SalesHeader."Bill-to Name";
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
            CustVendorNo := Customer."No.";
            CustVendorName := Customer.Name;
          END;
      END;
    END;

    PROCEDURE GetChangeRecordDetails@2() ChangeDetails : Text;
    VAR
      WorkflowRecordChange@1000 : Record 1525;
      OldValue@1001 : Text;
      NewValue@1002 : Text;
    BEGIN
      WorkflowRecordChange.SETRANGE("Record ID","Record ID to Approve");
      WorkflowRecordChange.SETRANGE("Workflow Step Instance ID","Workflow Step Instance ID");

      IF WorkflowRecordChange.FINDSET THEN
        REPEAT
          WorkflowRecordChange.CALCFIELDS("Field Caption");
          NewValue := WorkflowRecordChange.GetFormattedNewValue(TRUE);
          OldValue := WorkflowRecordChange.GetFormattedOldValue(TRUE);
          ChangeDetails += STRSUBSTNO(ChangeRecordDetailsTxt,WorkflowRecordChange."Field Caption",
              OldValue,NewValue);
        UNTIL WorkflowRecordChange.NEXT = 0;
    END;

    PROCEDURE CanCurrentUserEdit@7() : Boolean;
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);
      EXIT((UserSetup."User ID" IN ["Sender ID","Approver ID"]) OR UserSetup."Approval Administrator");
    END;

    PROCEDURE MarkAllWhereUserisApproverOrSender@9();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF UserSetup.GET(USERID) AND UserSetup."Approval Administrator" THEN
        EXIT;
      FILTERGROUP(-1); // Used to support the cross-column search
      SETRANGE("Approver ID",USERID);
      SETRANGE("Sender ID",USERID);
      IF FINDSET THEN
        REPEAT
          MARK(TRUE);
        UNTIL NEXT = 0;
      MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE "--- TES TA1.0 START ---"@1000000001();
    BEGIN
    END;

    PROCEDURE ShowDocument@1000000000();
    VAR
      SalesHeader@1001 : Record 36;
      PurchHeader@1000 : Record 38;
    BEGIN
      CASE "Table ID" OF
        DATABASE::"Sales Header":
          BEGIN
            IF NOT SalesHeader.GET("Document Type","Document No.") THEN
              EXIT;
            CASE "Document Type" OF
              "Document Type"::Quote:
                PAGE.RUN(PAGE::"Sales Quote",SalesHeader);
              "Document Type"::Order:
                PAGE.RUN(PAGE::"Sales Order",SalesHeader);
              "Document Type"::Invoice:
                PAGE.RUN(PAGE::"Sales Invoice",SalesHeader);
              "Document Type"::"Credit Memo":
                PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader);
              "Document Type"::"Blanket Order":
                PAGE.RUN(PAGE::"Blanket Sales Order",SalesHeader);
              "Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF NOT PurchHeader.GET("Document Type","Document No.") THEN
              EXIT;
            // TA1.0 - START
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type","Document Type");
            PurchHeader.SETRANGE("No.","Document No.");
            PurchHeader.FINDFIRST;
            PurchHeader.FILTERGROUP(2);
            // TA1.0 - END
            CASE "Document Type" OF
              "Document Type"::Quote:
                PAGE.RUN(PAGE::"Purchase Quote",PurchHeader);
              "Document Type"::Order:
                PAGE.RUN(PAGE::"TA Purchase Order",PurchHeader);
              "Document Type"::Invoice: PAGE.RUN(PAGE::"Purchase Invoice",PurchHeader);
              "Document Type"::"Credit Memo": PAGE.RUN(PAGE::"Purchase Credit Memo",PurchHeader);
              "Document Type"::"Blanket Order":
                PAGE.RUN(PAGE::"Blanket Purchase Order",PurchHeader);
              "Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Purchase Return Order",PurchHeader);
            END;
          END;
        ELSE
          EXIT;
      END;
    END;

    PROCEDURE GetDimensionDescription@1000000005(DimensionCode@1000000000 : Code[20];DimensionValueCode@1000000001 : Code[20]) : Text[80];
    VAR
      Dimension@1000000002 : Record 348;
      DimensionValue@1000000003 : Record 349;
    BEGIN
      //TA1.0 - START
      IF (DimensionCode = '') OR (DimensionValueCode = '') THEN EXIT;

      Dimension.GET(DimensionCode);
      DimensionValue.GET(DimensionCode,DimensionValueCode);
      EXIT(Dimension.Name + ' : '+ DimensionValue.Name);
      //TA1.0 - END
    END;

    LOCAL PROCEDURE "--- TES TA1.0 END ---"@1000000002();
    BEGIN
    END;

    BEGIN
    END.
  }
}

