OBJECT Page 9807 User Card
{
  OBJECT-PROPERTIES
  {
    Date=17/10/17;
    Time=15:46:52;
    Modified=Yes;
    Version List=NAVW110.00,TA1.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=User Card;
               ENG=User Card];
    SourceTable=Table2000000120;
    DataCaptionExpr="Full Name";
    DelayedInsert=Yes;
    PageType=Card;
    OnInit=BEGIN
             DeployedToAzure := IdentityManagement.IsAzure;
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit 9002;
               BEGIN
                 SoftwareAsAService := PermissionManager.SoftwareAsAService;

                 HideExternalUsers;

                 IsWindowsClient := (CURRENTCLIENTTYPE = CLIENTTYPE::Windows);
               END;

    OnAfterGetRecord=VAR
                       PermissionManager@1000 : Codeunit 9002;
                     BEGIN
                       WindowsUserName := IdentityManagement.UserName("Windows Security ID");

                       TESTFIELD("User Name");

                       Password := IdentityManagement.GetMaskedNavPassword("User Security ID");
                       ACSStatus := IdentityManagement.GetACSStatus("User Security ID");
                       WebServiceExpiryDate := IdentityManagement.GetWebServiceExpiryDate("User Security ID");
                       AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                       HasExchangeIdentifier := "Exchange Identifier" <> '';
                       InitialState := State;

                       IF NOT ISNULLGUID("Application ID") THEN
                         ApplicationID := "Application ID";

                       IF PermissionManager.SoftwareAsAService AND (USERID <> "User Name") THEN BEGIN
                         AllowChangeWebServiceAccessKey := FALSE;
                         WebServiceID := '*************************************';
                       END ELSE BEGIN
                         AllowChangeWebServiceAccessKey := TRUE;
                         WebServiceID := IdentityManagement.GetWebServicesKey("User Security ID");
                       END;
                     END;

    OnNewRecord=VAR
                  PermissionManager@1001 : Codeunit 9002;
                BEGIN
                  IF PermissionManager.SoftwareAsAService THEN
                    ERROR(CannotCreateUsersErr);
                  WindowsUserName := '';
                  Password := '';
                  "Change Password" := FALSE;
                  WebServiceID := '';
                  CLEAR(WebServiceExpiryDate);
                END;

    OnInsertRecord=BEGIN
                     "User Security ID" := CREATEGUID;
                     TESTFIELD("User Name");
                   END;

    OnModifyRecord=BEGIN
                     TESTFIELD("User Name");
                   END;

    OnDeleteRecord=BEGIN
                     IF SoftwareAsAService THEN
                       ERROR(CannotDeleteUsersErr)
                   END;

    OnQueryClosePage=BEGIN
                       IF "User Name" <> '' THEN
                         EXIT(ValidateAuthentication);
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=Authentication;
                                 ENG=Authentication] }
      { 1000000005;2 ;Action    ;
                      Name=UserSetup;
                      CaptionML=ENU=User Setup;
                      RunObject=Page 119;
                      RunPageLink=User ID=FIELD(User Name);
                      Promoted=Yes;
                      Image=UserSetup;
                      PromotedCategory=Process }
      { 21      ;2   ;Action    ;
                      Name=AcsSetup;
                      CaptionML=[ENU=&ACS Setup;
                                 ENG=&ACS Setup];
                      ToolTipML=[ENU=Set up Access Control Service authentication, such as generating an authentication key that the user can use to connect to Azure.;
                                 ENG=Set up Access Control Service authentication, such as generating an authentication key that the user can use to connect to Azure.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=ServiceSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditACSStatus;
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Name=ChangePassword;
                      CaptionML=[ENU=Change &Password;
                                 ENG=Change &Password];
                      ToolTipML=[ENU=Change the user's password if the user connects using password authentication.;
                                 ENG=Change the user's password if the user connects using password authentication.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT SoftwareAsAService;
                      PromotedIsBig=Yes;
                      Image=EncryptionKeys;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditNavPassword;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      Name=ChangeWebServiceAccessKey;
                      CaptionML=[ENU=Change &Web Service Key;
                                 ENG=Change &Web Service Key];
                      ToolTipML=[ENU=Set up the key that web services use to access your data, and then specify the key on the user card for the relevant user accounts.;
                                 ENG=Set up the key that web services use to access your data, and then specify the key on the user card for the relevant user accounts.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=AllowChangeWebServiceAccessKey;
                      PromotedIsBig=Yes;
                      Image=ServiceCode;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditWebServiceID;
                               END;
                                }
      { 35      ;2   ;Action    ;
                      Name=DeleteExchangeIdentifier;
                      CaptionML=[ENU=Delete Exchange Identifier Mapping;
                                 ENG=Delete Exchange Identifier Mapping];
                      ToolTipML=[ENU=Delete the document exchange mapping for the current user.;
                                 ENG=Delete the document exchange mapping for the current user.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasExchangeIdentifier;
                      Image=DeleteXML;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(ConfirmRemoveExchangeIdentifierQst) THEN
                                   EXIT;

                                 CLEAR("Exchange Identifier");
                                 MODIFY(TRUE);
                                 HasExchangeIdentifier := FALSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 11  ;1   ;Group     ;
                Name=Windows Authentication;
                CaptionML=[ENU=Windows Authentication;
                           ENG=Windows Authentication];
                Visible=(NOT DeployedToAzure) AND (NOT SoftwareAsAService);
                GroupType=Group }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.;
                           ENG=Specifies the Windows Security ID of the user. This is only relevant for Windows authentication.];
                SourceExpr="Windows Security ID";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                Name=Windows User Name;
                AssistEdit=No;
                CaptionML=[ENU=Windows User Name;
                           ENG=Windows User Name];
                ToolTipML=[ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                           ENG=Specifies the name of a valid Active Directory user, using the format domain\username.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=NOT IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=Windows User Name Desktop;
                AssistEdit=Yes;
                CaptionML=[ENU=Windows User Name;
                           ENG=Windows User Name];
                ToolTipML=[ENU=Specifies the name of a valid Active Directory user, using the format domain\username.;
                           ENG=Specifies the name of a valid Active Directory user, using the format domain\username.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WindowsUserName;
                Importance=Promoted;
                Visible=IsWindowsClient;
                OnValidate=BEGIN
                             ValidateWindowsUserName;
                           END;

                OnAssistEdit=VAR
                               DSOP@1000 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
                               result@1001 : Text;
                             BEGIN
                               DSOP := DSOP.DSObjectPickerWrapper;
                               result := DSOP.InvokeDialogAndReturnSid;
                               IF result <> '' THEN BEGIN
                                 "Windows Security ID" := result;
                                 ValidateSid;
                                 WindowsUserName := IdentityManagement.UserName("Windows Security ID");
                                 SetUserName;
                               END;
                             END;
                              }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           ENG=General];
                GroupType=Group }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=User Security ID;
                           ENG=User Security ID];
                ToolTipML=[ENU=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.;
                           ENG=Specifies an ID that uniquely identifies the user. This value is generated automatically and should not be changed.];
                SourceExpr="User Security ID";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.;
                           ENG=Specifies the user's name. If the user is required to present credentials when starting the client, this is the name that the user must present.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Name";
                Importance=Promoted;
                OnValidate=BEGIN
                             IF xRec."User Name" <> "User Name" THEN
                               ValidateUserName;
                           END;
                            }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the full name of the user.;
                           ENG=Specifies the full name of the user.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Full Name";
                Editable=NOT SoftwareAsAService }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of license that applies to the user.;
                           ENG=Specifies the type of licence that applies to the user.];
                ApplicationArea=#All;
                SourceExpr="License Type";
                Visible=NOT SoftwareAsAService }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the user's login is enabled.;
                           ENG=Specifies if the user's login is enabled.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=State;
                Importance=Promoted }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a date past which the user will no longer be authorized to log on to the Windows client.;
                           ENG=Specifies a date past which the user will no longer be authorised to log on to the Windows client.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Expiry Date";
                Visible=NOT SoftwareAsAService }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the user's email address.;
                           ENG=Specifies the user's email address.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Contact Email" }

    { 31  ;1   ;Group     ;
                Name=ACS Authentication;
                CaptionML=[ENU=Access Control Service Authentication;
                           ENG=Access Control Service Authentication];
                Visible=NOT SoftwareAsAService;
                Enabled=false;
                GroupType=Group }

    { 22  ;2   ;Field     ;
                DrillDown=No;
                AssistEdit=Yes;
                CaptionML=[ENU=ACS Access Status;
                           ENG=ACS Access Status];
                ToolTipML=[ENU=Specifies the user's status for ACS authentication. When you start creating a user, the status is Disabled. After you create a user, the status changes to Pending. After the user logs on successfully, the status changes to Enabled.;
                           ENG=Specifies the user's status for ACS authentication. When you start creating a user, the status is Disabled. After you create a user, the status changes to Pending. After the user logs on successfully, the status changes to Enabled.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ACSStatus;
                Importance=Promoted;
                Visible=NOT SoftwareAsAService;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditACSStatus;
                             END;
                              }

    { 15  ;1   ;Group     ;
                Name=NAV Password Authentication;
                CaptionML=[ENU=Microsoft Dynamics NAV Password Authentication;
                           ENG=Microsoft Dynamics NAV Password Authentication];
                Visible=NOT SoftwareAsAService;
                GroupType=Group }

    { 25  ;2   ;Field     ;
                ExtendedDatatype=Masked;
                AssistEdit=Yes;
                CaptionML=[ENU=Password;
                           ENG=Password];
                ToolTipML=[ENU=Specifies an initial password for the user. To sign in to the client, the user must provide the name that is specified in the User Name field and this password.;
                           ENG=Specifies an initial password for the user. To sign in to the client, the user must provide the name that is specified in the User Name field and this password.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Password;
                Importance=Standard;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditNavPassword;
                             END;
                              }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=User must change password at next login;
                           ENG=User must change password at next login];
                ToolTipML=[ENU=Specifies if the user will be prompted to change the password at next login.;
                           ENG=Specifies if the user will be prompted to change the password at next login.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Change Password" }

    { 19  ;1   ;Group     ;
                Name=Web Service Access;
                CaptionML=[ENU=Web Service Access;
                           ENG=Web Service Access];
                Visible=false;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                AssistEdit=Yes;
                CaptionML=[ENU=Web Service Access Key;
                           ENG=Web Service Access Key];
                ToolTipML=[ENU=Specifies a generated key that Dynamics NAV web service applications can use to authenticate to Dynamics NAV services. Choose the AssistEdit button to generate a key.;
                           ENG=Specifies a generated key that Dynamics NAV web service applications can use to authenticate to Dynamics NAV services. Choose the AssistEdit button to generate a key.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceID;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               EditWebServiceID;
                             END;
                              }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Web Service Expiry Date;
                           ENG=Web Service Expiry Date];
                ToolTipML=[ENU=Specifies an expiration date for the web services access key.;
                           ENG=Specifies an expiration date for the web services access key.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=WebServiceExpiryDate;
                Importance=Promoted;
                Editable=FALSE }

    { 27  ;1   ;Group     ;
                Name=Office 365 Authentication;
                CaptionML=[@@@="{Locked=""Office 365""}";
                           ENU=Office 365 Authentication;
                           ENG=Office 365 Authentication];
                Visible=false;
                GroupType=Group }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.;
                           ENG=Specifies the Microsoft account that this user signs into Office 365 or SharePoint Online with.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Authentication Email";
                Editable=NOT SoftwareAsAService;
                OnValidate=BEGIN
                             IdentityManagement.SetAuthenticationEmail("User Security ID","Authentication Email");
                             CurrPage.SAVERECORD;
                             AuthenticationStatus := IdentityManagement.GetAuthenticationStatus("User Security ID");
                           END;
                            }

    { 36  ;2   ;Field     ;
                Name=ApplicationID;
                CaptionML=[ENU=Application ID;
                           ENG=Application ID];
                ToolTipML=[ENU=Specifies the client ID of the Microsoft Azure Active Directory application when authenticating web-service calls. This field is only relevant when the Dynamics NAV user is used for web services.;
                           ENG=Specifies the client ID of the Microsoft Azure Active Directory application when authenticating web-service calls. This field is only relevant when the Dynamics NAV user is used for web services.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplicationID;
                OnValidate=BEGIN
                             IF ApplicationID = '' THEN
                               CLEAR("Application ID")
                             ELSE
                               "Application ID" := ApplicationID
                           END;
                            }

    { 34  ;2   ;Field     ;
                Name=MappedToExchangeIdentifier;
                CaptionML=[ENU=Mapped To Exchange Identifier;
                           ENG=Mapped To Exchange Identifier];
                ToolTipML=[ENU=Specifies whether the user is mapped to a Microsoft Exchange identifier, which enables the user to access Dynamics NAV from Exchange applications (such as Outlook) without having to sign-in.;
                           ENG=Specifies whether the user is mapped to a Microsoft Exchange identifier, which enables the user to access Dynamics NAV from Exchange applications (such as Outlook) without having to sign-in.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=HasExchangeIdentifier;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE }

    { 32  ;2   ;Field     ;
                Name=AuthenticationStatus;
                CaptionML=[ENU=Authentication Status;
                           ENG=Authentication Status];
                ToolTipML=[ENU=Specifies the user's status for Office 365 authentication. When you start to create a user, the status is Disabled. After you specify an authentication email address for the user, the status changes to Inactive. After the user logs on successfully, the status changes to Active.;
                           ENG=Specifies the user's status for Office 365 authentication. When you start to create a user, the status is Disabled. After you specify an authentication email address for the user, the status changes to Inactive. After the user logs on successfully, the status changes to Active.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AuthenticationStatus;
                Editable=FALSE }

    { 33  ;1   ;Part      ;
                Name=UserGroups;
                CaptionML=[ENU=User Groups;
                           ENG=User Groups];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9833;
                PartType=Page }

    { 14  ;1   ;Part      ;
                Name=Permissions;
                CaptionML=[ENU=User Permission Sets;
                           ENG=User Permission Sets];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=User Security ID=FIELD(User Security ID);
                PagePartID=Page9801;
                PartType=Page }

    { 1000000003;1;Part   ;
                CaptionML=[ENU=Approval Roles;
                           ENG=Approval Roles];
                SubPageLink=TF User=FIELD(User Name);
                PagePartID=Page81042;
                PartType=Page }

    { 1000000004;1;Part   ;
                SubPageLink=User=FIELD(User Name);
                PagePartID=Page81057;
                PartType=Page }

    { 1000000002;1;Group  ;
                CaptionML=ENU=Dimensions;
                GroupType=Group;
                Layout=Columns }

    { 1000000001;2;Part   ;
                CaptionML=ENU=Dimension Template Assignment;
                SubPageLink=User Code=FIELD(User Name);
                PagePartID=Page81044;
                PartType=Page }

    { 1000000000;2;Part   ;
                CaptionML=ENU=Dimension Assignment;
                SubPageLink=Portal User=FIELD(User Name);
                PagePartID=Page81045;
                PartType=Page }

    { 16  ;    ;Container ;
                ContainerType=FactBoxArea }

    { 17  ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 18  ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      UserSecID@1007 : Record 2000000120;
      IdentityManagement@1011 : Codeunit 9801;
      WindowsUserName@1000 : Text[208];
      Text001@1003 : TextConst 'ENU=The account %1 is not a valid Windows account.;ENG=The account %1 is not a valid Windows account.';
      Text002@1002 : TextConst 'ENU=The account %1 already exists.;ENG=The account %1 already exists.';
      Text003@1001 : TextConst 'ENU=The account %1 is not allowed.;ENG=The account %1 is not allowed.';
      Password@1006 : Text[80];
      ACSStatus@1008 : 'Disabled,Pending,Registered,Unknown';
      WebServiceID@1009 : Text[80];
      Confirm001Qst@1010 : TextConst 'ENU=The current Web Service Access Key will not be valid after editing. All clients that use it have to be updated. Do you want to continue?;ENG=The current Web Service Access Key will not be valid after editing. All clients that use it have to be updated. Do you want to continue?';
      WebServiceExpiryDate@1012 : DateTime;
      Confirm002Qst@1013 : TextConst 'ENU=You have not completed all necessary fields for the Credential Type that this client is currently using. The user will not be able to log in unless you provide a value in the %1 field. Are you sure that you want to close the window?;ENG=You have not completed all necessary fields for the Credential Type that this client is currently using. The user will not be able to log in unless you provide a value in the %1 field. Are you sure that you want to close the window?';
      DeployedToAzure@1014 : Boolean INDATASET;
      Confirm003Qst@1005 : TextConst 'ENU=The user will not be able to sign in unless you change the state to Enabled. Are you sure that you want to close the page?;ENG=The user will not be able to sign in unless you change the state to Enabled. Are you sure that you want to close the page?';
      HasExchangeIdentifier@1016 : Boolean;
      AuthenticationStatus@1004 : 'Disabled,Inactive,Active';
      Confirm004Qst@1015 : TextConst 'ENU=The user will not be able to sign in because no authentication data was provided. Are you sure that you want to close the page?;ENG=The user will not be able to sign in because no authentication data was provided. Are you sure that you want to close the page?';
      ConfirmRemoveExchangeIdentifierQst@1017 : TextConst 'ENU=If you delete the Exchange Identifier Mapping, the user will no longer automatically be signed in when they use Exchange applications.\Do you want to continue?;ENG=If you delete the Exchange Identifier Mapping, the user will no longer automatically be signed in when they use Exchange applications.\Do you want to continue?';
      SoftwareAsAService@1018 : Boolean;
      ApplicationID@1019 : Text;
      CannotCreateUsersErr@1020 : TextConst 'ENU=You cannot add users on this page. Administrators can add users in the Office 365 administration portal.;ENG=You cannot add users on this page. Administrators can add users in the Office 365 administration portal.';
      AllowChangeWebServiceAccessKey@1021 : Boolean;
      IsWindowsClient@1024 : Boolean;
      CannotDeleteUsersErr@1022 : TextConst 'ENU=You cannot delete users on this page. Administrators can delete users in the Office 365 administration portal.;ENG=You cannot delete users on this page. Administrators can delete users in the Office 365 administration portal.';
      InitialState@1023 : Option;

    LOCAL PROCEDURE ValidateSid@1();
    VAR
      User@1000 : Record 2000000120;
    BEGIN
      IF "Windows Security ID" = '' THEN
        ERROR(Text001,"User Name");

      IF ("Windows Security ID" = 'S-1-1-0') OR ("Windows Security ID" = 'S-1-5-7') OR ("Windows Security ID" = 'S-1-5-32-544') THEN
        ERROR(Text003,IdentityManagement.UserName("Windows Security ID"));

      User.SETFILTER("Windows Security ID","Windows Security ID");
      User.SETFILTER("User Security ID",'<>%1',"User Security ID");
      IF NOT User.ISEMPTY THEN
        ERROR(Text002,WindowsUserName);
    END;

    LOCAL PROCEDURE ValidateAuthentication@7() : Boolean;
    VAR
      ValidationField@1000 : Text;
    BEGIN
      UserSecID.RESET;
      IF (UserSecID.COUNT = 1) OR (USERSECURITYID = "User Security ID") THEN BEGIN
        IF IdentityManagement.IsWindowsAuthentication AND ("Windows Security ID" = '') THEN
          ValidationField := 'Windows User Name';

        IF IdentityManagement.IsUserNamePasswordAuthentication AND (Password = '') THEN
          ValidationField := 'Password';

        IF IdentityManagement.IsAccessControlServiceAuthentication AND (ACSStatus = 0) AND (AuthenticationStatus = 0) THEN
          ValidationField := 'ACSStatus / AuthenticationStatus';

        IF ValidationField <> '' THEN
          EXIT(CONFIRM(Confirm002Qst,FALSE,ValidationField));
      END ELSE BEGIN
        IF ("Windows Security ID" = '') AND (Password = '') AND (ACSStatus = 0) AND (AuthenticationStatus = 0) THEN
          EXIT(CONFIRM(Confirm004Qst,FALSE));
      END;

      IF (InitialState = State::Enabled) AND (State = State::Disabled) THEN
        EXIT(CONFIRM(Confirm003Qst,FALSE));

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateUserName@3();
    VAR
      UserMgt@1000 : Codeunit 418;
    BEGIN
      UserMgt.ValidateUserName(Rec,xRec,WindowsUserName);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE EditWebServiceID@6();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      SetWebServiceAccessKey@1000 : Page 9812;
    BEGIN
      IF PermissionManager.SoftwareAsAService AND (USERSECURITYID <> "User Security ID") THEN
        EXIT;

      TESTFIELD("User Name");

      IF CONFIRM(Confirm001Qst) THEN BEGIN
        UserSecID.SETCURRENTKEY("User Security ID");
        UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
        SetWebServiceAccessKey.SETRECORD(UserSecID);
        SetWebServiceAccessKey.SETTABLEVIEW(UserSecID);
        IF SetWebServiceAccessKey.RUNMODAL = ACTION::OK THEN
          CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE EditNavPassword@8();
    VAR
      SetPassword@1000 : Page 9810;
    BEGIN
      TESTFIELD("User Name");

      CurrPage.SAVERECORD;
      COMMIT;

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      SetPassword.SETRECORD(UserSecID);
      SetPassword.SETTABLEVIEW(UserSecID);
      IF SetPassword.RUNMODAL = ACTION::OK THEN
        CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE EditACSStatus@9();
    VAR
      UserACSSetup@1000 : Page 9811;
    BEGIN
      TESTFIELD("User Name");

      UserSecID.SETCURRENTKEY("User Security ID");
      UserSecID.SETRANGE("User Security ID","User Security ID","User Security ID");
      UserACSSetup.SETRECORD(UserSecID);
      UserACSSetup.SETTABLEVIEW(UserSecID);
      IF UserACSSetup.RUNMODAL = ACTION::OK THEN
        CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetUserName@4();
    BEGIN
      "User Name" := WindowsUserName;
      ValidateUserName;
    END;

    LOCAL PROCEDURE HideExternalUsers@2();
    VAR
      PermissionManager@1001 : Codeunit 9002;
      OriginalFilterGroup@1000 : Integer;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      OriginalFilterGroup := FILTERGROUP;
      FILTERGROUP := 2;
      SETFILTER("License Type",'<>%1',"License Type"::"External User");
      FILTERGROUP := OriginalFilterGroup;
    END;

    LOCAL PROCEDURE ValidateWindowsUserName@5();
    VAR
      UserSID@1001 : Text;
    BEGIN
      IF WindowsUserName = '' THEN
        "Windows Security ID" := ''
      ELSE BEGIN
        UserSID := SID(WindowsUserName);
        WindowsUserName := IdentityManagement.UserName(UserSID);
        IF WindowsUserName <> '' THEN BEGIN
          "Windows Security ID" := UserSID;
          ValidateSid;
          SetUserName;
        END ELSE
          ERROR(Text001,WindowsUserName);
      END;
    END;

    BEGIN
    END.
  }
}

