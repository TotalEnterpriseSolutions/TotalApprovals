OBJECT Codeunit 91 Purch.-Post (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=19/09/17;
    Time=11:29:43;
    Modified=Yes;
    Version List=NAVW110.00,TA1.0;
  }
  PROPERTIES
  {
    TableNo=38;
    EventSubscriberInstance=Manual;
    OnRun=VAR
            PurchaseHeader@1000 : Record 38;
          BEGIN
            IF NOT FIND THEN
              ERROR(NothingToPostErr);

            PurchaseHeader.COPY(Rec);
            Code(PurchaseHeader);
            Rec := PurchaseHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice;ENG=&Receive,&Invoice,Receive &and Invoice';
      Text001@1001 : TextConst 'ENU=Do you want to post the %1?;ENG=Do you want to post the %1?';
      Text002@1002 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;ENG=&Ship,&Invoice,Ship &and Invoice';
      Selection@1005 : Integer;
      NothingToPostErr@1007 : TextConst 'ENU=There is nothing to post.;ENG=There is nothing to post.';

    LOCAL PROCEDURE Code@1(VAR PurchaseHeader@1002 : Record 38);
    VAR
      PurchSetup@1000 : Record 312;
      PurchPostViaJobQueue@1001 : Codeunit 98;
      DocumentType@1000000000 : Record 81001;
      SureReceiveOrder@1000000001 : TextConst 'ENU=Are you sure you want to receive lines on this order?';
      ErrorReceiving@1000000002 : TextConst 'ENU=This document type does not allow the person responsible for the document to receive the goods.  Please find an alternate user to receive the goods on this order.';
    BEGIN
      WITH PurchaseHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              // TA1.0 - START
              {Selection := STRMENU(Text000,3);
              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];}
              IF (DocumentType.GET(PurchaseHeader."Procurement Workflow")) AND (DocumentType."Raised By can't Receive") AND ("Person Responsible" = USERID) THEN ERROR(ErrorReceiving);
              IF NOT CONFIRM(SureReceiveOrder) THEN EXIT;
              Invoice := FALSE;
              Receive := TRUE;
              // TA1.0 - END
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(Text002,3);
              IF Selection = 0 THEN
                EXIT;
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
            IF NOT CONFIRM(Text001,FALSE,LOWERCASE(FORMAT("Document Type"))) THEN
              EXIT;
        END;
        "Print Posted Documents" := FALSE;
      END;
      PurchSetup.GET;
      IF PurchSetup."Post with Job Queue" THEN
        PurchPostViaJobQueue.EnqueuePurchDoc(PurchaseHeader)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader)
    END;

    PROCEDURE Preview@2(VAR PurchaseHeader@1000 : Record 38);
    VAR
      GenJnlPostPreview@1002 : Codeunit 19;
      PurchPostYesNo@1001 : Codeunit 91;
    BEGIN
      BINDSUBSCRIPTION(PurchPostYesNo);
      GenJnlPostPreview.Preview(PurchPostYesNo,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,19,OnRunPreview)]
    LOCAL PROCEDURE OnRunPreview@3(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchPost@1004 : Codeunit 90;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        COPY(RecVar);
        Ship := "Document Type" = "Document Type"::"Return Order";
        Receive := "Document Type" = "Document Type"::Order;
        Invoice := TRUE;
      END;
      PurchPost.SetPreviewMode(TRUE);
      Result := PurchPost.RUN(PurchaseHeader);
    END;

    BEGIN
    END.
  }
}

